JSTL 카테고리
core : 로직제어 - 반복문, 조건분기, 변수 ==> 스크립틀릿을 대체
국제화 : 날짜형식, 통화, 숫자 포맷
fn : 문자관련 함수( 사용 빈도는 다소 떨어짐 )
xml, database ...

JSTL 혹은 별도 태그를 사용하고 싶은 경우 해당 정의 사항을 선언
<%@ .... 지시자 : 페이지 설정, 정보에 대한 안내
<%@ page
<%@ taglib prefix="" uri=url...." %>

prefix 설정은 개발자 임의로 설정이 가능하지만 많은 개발자들이 다음과 같은 형식으로 작성한다.
core ==> c
국제화(format) ==> fmt

core tag library
set : 속성(page, request, session, application)

<c:set var="userid" value="brown" scope="page"/>
var : 속성명
value : 저장할 값
scope : 어떤 scope 객체에 저장할지.. scope는 생략가능하며 이 경우 default로 page로 저장된다.
<% request.setAttribute("userid", "brown") %>

if : java의 if와 동일하지만 else if, else 기능이 빠짐
	즉 한 조건으로만 비교가 가능하다.
	
<c:if test="참거짓을 판단할 수 있는 문장">
	test 속성이 참일 때 실행할 문장
</c:if>

주의점 : test 속성을 통해 값을 비교할 경우 다음과 같은 실수를 많이 한다.
<c:if test="${name} == 'brown'">....</c:if>

==> 비교 구문이 EL 안에 표현되어야 한다.

<c:if test="${name == 'brown'}">....</c:if>

주의점2 : test 속성에 공백이 있으면 안된다.

test ="${name == 'brown'} "

test ="${name == 'brown'}"

choose : java의 if - else if - else
ex)
<c:choose>
	<c:when test=""> test 속성이 참일 때 실행할 문장 작성 </c:when>
	<c:when test=""> test 속성이 참일 때 실행할 문장 작성 </c:when>
	<c:when test=""> test 속성이 참일 때 실행할 문장 작성 </c:when>
	<c:otherwise>위에 기술된 when 절의 조건을 만족시키지 못할 때 기본으로 실행할 문장(else)</c:otherwise>
</c:choose>

foreach : java의 반복문(속성을 어떤 걸 쓰냐에 따라 일반 반복문, 향상된 for문 둘 다 사용 가능)
속성 
items : 여러 개의 값을 갖고 있는 배열, 리스트, map 등의 객체를 설정
var : items의 값을 하나씩 저장할 변수
	for(String var : items)는 다음과 같이 JSTL에서 작성한다.
	<c:foreach items="${items}" var="var">
	</c:foreach>

일반 for문(index를 사용한다. 사용, 시작, 종료값)
for(int i = 0 ; i <= 10; i++)
begin : 인덱스 변수의 시작값
end : 인덱스 변수의 종료값
step : 증감값(기본값은 1)
var : 인덱스 변수
varStatus : 루프의 정보를 담고 있는 변수
	index : 루프에서 현재 인덱스
	count : 루프 실행횟수
	begin,end : 루프 시작값 - 종료값
	step : 루프 스텝값
<c:foreach var="i" begin="0" end="10" step="1">
</c:foreach>

EL scope 객체 : pageScope, requestScope(request 객체에 저장된 속성들을 모아놓은 map), sessionScope, applicationScope
   기타 기본객체: param, paramValues, header, headerValues, cookie
   
   <%= request.getContextPath()%> : 표현식을 이용한 경로 표현
   
	pageContext 객체를 통해 getRequest, getSession, getApplication 등을 사용할 수 있다.
    
    <% pageContext.getRequest();%> ==> 스크립틀릿을 사용한 경로 지정
	${pageContext.request.contextPath } ==> EL을 사용한 경로 지정
    
